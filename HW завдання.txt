PASS; Solo-1993


JSON
 4. Создать внешний репозиторий c названием JSON.

 5. Клонировать репозиторий JSON на локальный компьютер.
git clone git@github.com:DmytroOdesit/JSON.git

 6. Внутри локального JSON создать файл “new.json”.
cat > new.json
putt info
ctrl+c

 7. Добавить файл под гит.
git add new.json

 8. Закоммитить файл.
git commit -m "add new.json"

 9. Отправить файл на внешний GitHub репозиторий.
git push

 10. Отредактировать содержание файла “new.json” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате JSON.
cat > new.json
write info
ctrl+c

 11. Отправить изменения на внешний репозиторий.
git push

 12. Создать файл preferences.json
touch preferences.json

 13. В файл preferences.json добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате JSON.
cat > preferences.json 
press enter
{"Film": "Jon_Wick",
"Serial": "Simpsons",
"Food": "Meat",
"Part_of_year": "Spring",
"Country_to_visit": "Georgia"}
ctrl+c

 14. Создать файл sklls.json добавить информацию о скиллах которые будут изучены на курсе в формате JSON
cat > skills.json
press enter
{"Skills": "testing, checking"}

 15. Отправить сразу 2 файла на внешний репозиторий.
git add -A "for all"
git commit -a/--all
git push

 16. На веб интерфейсе создать файл bug_report.json.
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 18. На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт в формате JSON.
 19. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 20. Синхронизировать внешний и локальный репозиторий JSON
git pull

XML
 21. Создать внешний репозиторий c названием XML.
 22. Клонировать репозиторий XML на локальный компьютер.
git clone git@github.com:DmytroOdesit/XML.git

 23. Внутри локального XML создать файл “new.xml”.
touch new.xml

 24. Добавить файл под гит.
git add new.xml

 25. Закоммитить файл.
git commit -m "add new.xml"

 26. Отправить файл на внешний GitHub репозиторий.
git push

 27. Отредактировать содержание файла “new.xml” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате XML.
cat > new.xml

<?xml version="1.0" encoding="UTF-8" ?>
<root>
	<item0>Name - Dmytro</item0>
	<item1>Age - 29</item1>
	<item2>Pets - 2</item2>
	<item3>Prefer salary - 1500</item3>
</root>

 28. Отправить изменения на внешний репозиторий.
git add new.xml
git commit -m "add new.xml"
git push

 29. Создать файл preferences.xml
 30. В файл preferences.xml добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате XML.
cat > preferences.xml
<?xml version="1.0" encoding="UTF-8" ?>
<root>
	<item0>"Film": "Jon_Wick",</item0>
	<item1>"Serial": "Simpsons",</item1>
	<item2>"Food": "Meat",</item2>
	<item3>"Part_of_year": "Spring",</item3>
	<item4>"Country_to_visit": "Georgia"</item4>
</root>

 31. Создать файл sklls.xml добавить информацию о скиллах которые будут изучены на курсе в формате XML
cat > skills.xml
<?xml version="1.0" encoding="UTF-8" ?>
<root>
	<item0>"Skills": "testing, checking"</item0>
</root>

 32. Сделать коммит в одну строку.
git add .; git commit -m “added preferences.xml, skills.xml”

 33. Отправить сразу 2 файла на внешний репозиторий.
git push

 34. На веб интерфейсе создать файл bug_report.xml.
 35. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 36. На веб интерфейсе модифицировать файл bug_report.xml, добавить баг репорт в формате XML.
 37. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 38. Синхронизировать внешний и локальный репозиторий XML
git pull



TXT
 1. Создать внешний репозиторий c названием TXT.
 2. Клонировать репозиторий TXT на локальный компьютер.
git clone git@github.com:DmytroOdesit/TXT.git

 3. Внутри локального TXT создать файл “new.txt”.
touch new.txt

 4. Добавить файл под гит.
git add mew.txt

 5. Закоммитить файл.
git commit -m "add new.txt

 6. Отправить файл на внешний GitHub репозиторий.
git push

 7. Отредактировать содержание файла “new.txt” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате TXT.
cat > new.txt
Name - Dmytro,
Age - 29,
Pets - 2,
Salary - 1500.

 8. Отправить изменения на внешний репозиторий.
git add .
git commit - m "add new.txt"
git push

 9. Создать файл preferences.txt
 10. В файл preferences.txt” добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате TXT.
cat > preferences.txt
Film: "Jon_Wick",
"Serial": "Simpsons",
"Food": "Meat",
"Part_of_year": "Spring",
"Country_to_visit": "Georgia"
ctrl+c

 11. Создать файл sklls.txt добавить информацию о скиллах которые будут изучены на курсе в формате TXT
cat > skills.txt
"Skills": "testing, checking"
ctrl+c

 12. Сделать коммит в одну строку.
git add .; git commit -m “added preferences.txt, skills.txt”

 13. Отправить сразу 2 файла на внешний репозиторий.
git push

 14. На веб интерфейсе создать файл bug_report.txt.
 15. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 16. На веб интерфейсе модифицировать файл bug_report.txt, добавить баг репорт в формате TXT.
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 18. Синхронизировать внешний и локальный репозиторий TXT
git pull